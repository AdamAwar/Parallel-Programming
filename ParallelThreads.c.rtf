{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdio.h>\
#include <stdlib.h>\
#include <pthread.h>\
#include <time.h>\
\
#define M 75 // Number of rows in the first matrix\
#define N 75 // Number of columns in the first matrix\
#define K 75 // Number of columns in the second matrix\
#define NUM_THREADS 8 // Number of threads\
\
int A[M][N]; // First matrix\
int B[N][K]; // Second matrix\
int C[M][K]; // Result matrix\
\
typedef struct \{\
    int thread_id;\
    int start_row;\
    int end_row;\
\} ThreadArgs;\
\
void* multiply(void* arg) \{\
    ThreadArgs* args = (ThreadArgs*)arg;\
    for (int i = args->start_row; i < args->end_row; i++) \{\
        for (int j = 0; j < K; j++) \{\
            C[i][j] = 0;\
            for (int k = 0; k < N; k++) \{\
                C[i][j] += A[i][k] * B[k][j];\
            \}\
        \}\
    \}\
    pthread_exit(NULL);\
\}\
\
int main() \{\
	clock_t starttime, endtime;\
	starttime = clock();\
	\
    pthread_t threads[NUM_THREADS];\
    ThreadArgs thread_args[NUM_THREADS];\
    int rows_per_thread = M / NUM_THREADS;\
    int remaining_rows = M % NUM_THREADS;\
\
    // Initialize matrices A and B\
    for (int i = 0; i < M; i++) \{\
        for (int j = 0; j < N; j++) \{\
            A[i][j] = i * N + j;\
            B[j][i] = i * N + j;\
        \}\
    \}\
\
    // Create and run threads\
    for (int i = 0; i < NUM_THREADS; i++) \{\
        thread_args[i].thread_id = i;\
        thread_args[i].start_row = i * rows_per_thread;\
        thread_args[i].end_row = (i + 1) * rows_per_thread;\
        if (i == NUM_THREADS - 1) \{\
            thread_args[i].end_row += remaining_rows; // Add remaining rows to the last thread\
        \}\
\
        if (pthread_create(&threads[i], NULL, multiply, &thread_args[i]) != 0) \{\
            perror("Failed to create thread");\
            return 1;\
        \}\
    \}\
\
    // Wait for threads to finish\
    for (int i = 0; i < NUM_THREADS; i++) \{\
        if (pthread_join(threads[i], NULL) != 0) \{\
            perror("Failed to join thread");\
            return 1;\
        \}\
    \}\
endtime = clock();\
    // Print the result matrix C\
    printf("Result Matrix C:\\n");\
    for (int i = 0; i < M; i++) \{\
        for (int j = 0; j < K; j++) \{\
            printf("%d ", C[i][j]);\
        \}\
        printf("\\n");\
    \}\
    printf("Time: %f",(float)(endtime-starttime)/CLOCKS_PER_SEC);\
\
    return 0;\
\}\
//Time: 0.001149}